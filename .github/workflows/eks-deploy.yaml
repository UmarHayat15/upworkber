name: Deploy to EKS

on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name prod-eks # Make sure 'prod-eks' is your actual cluster name
      - name: Verify kubectl configuration
        run: |
          kubectl config view
          echo "Attempting to list nodes..."
          kubectl get nodes
      - name: Set Docker tag for substitution

        run: echo "DOCKER_TAG=${{ github.event.inputs.docker_tag }}" >> $GITHUB_ENV

      # Optional: Add step to create namespace
      # - name: Create Namespace if not exists
      #   run: kubectl create namespace pricing-service --dry-run=client -o yaml | kubectl apply -f -

      - name: Substitute Docker tag and apply Kubernetes manifests
        env:
           DOCKER_TAG: ${{ env.DOCKER_TAG }}
        run: |
          echo "Applying deployment with image tag: ${DOCKER_TAG}"
          # Check if files exist before applying
          if [ ! -f deploy/basic/deployment.yaml ]; then echo "deployment.yaml not found!"; exit 1; fi
          if [ ! -f deploy/basic/service.yaml ]; then echo "service.yaml not found!"; exit 1; fi

          # Substitute tag in deployment.yaml and apply it
          # Add -n <namespace> if using namespaces
          envsubst < deploy/basic/deployment.yaml | kubectl apply -f -

          # Apply the service manifest (no substitution needed)
          # Add -n <namespace> if using namespaces
          kubectl apply -f deploy/basic/service.yaml

      - name: Wait for deployment rollout and get LoadBalancer URL
        id: get_url
        run: |
          echo "Waiting for deployment rollout to complete..."
          kubectl rollout status deployment/my-app-pricing --timeout=5m

          echo "Waiting for LoadBalancer external IP/hostname..."
          LB_ADDRESS=""
          while [ -z "$LB_ADDRESS" ]; do
            
            LB_ADDRESS=$(kubectl get service my-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
            if [ -z "$LB_ADDRESS" ]; then
              
              LB_ADDRESS=$(kubectl get service my-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            fi
            if [ -z "$LB_ADDRESS" ]; then
              echo "LoadBalancer address not available yet, waiting..."
              sleep 15
            else
               echo "LoadBalancer address found: $LB_ADDRESS"
            fi
            
          done

          
          SERVICE_TYPE=$(kubectl get service my-app-service -o jsonpath='{.spec.type}')
          if [ "$SERVICE_TYPE" != "LoadBalancer" ]; then
             echo "Warning: Service type is $SERVICE_TYPE, not LoadBalancer. External URL may not be available."
          fi
          echo "::set-output name=url::http://${LB_ADDRESS}"

      - name: Print Application URL
        run: |
          echo "Application should be accessible at: ${{ steps.get_url.outputs.url }}"
          echo "Note: It might take a few extra minutes for the Load Balancer and DNS (if applicable) to become fully active."
